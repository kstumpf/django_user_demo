from django.shortcuts import render, render_to_response
from django.views.generic import ListView, DetailView
from .models import Post
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.decorators import permission_required, login_required

# create view
from forms import PostForm
from django.core.context_processors import csrf

# This function has been replaced by the class PostListView.
def post_list(request, *args, **kwargs):
#    language = 'en-gb' # stores what's inside our cookies
#    session_language = 'en-gb' # stores what's inside our session

    # If there is a lang in the cookies, lang should be set to lang in cookies
    # and not what our default language is.
#    if 'lang' in request.COOKIES:
#        language = request.COOKIES['lang']

    # This is how you can pull info out of the session.
#    if 'lang' in request.session:
#        session_language = request.session['lang']

    post_list = Post.objects.filter(published=True)

    args = {}
    args.update(csrf(request))

    args['posts'] = Post.objects.all()
#    args['language'] = language
#    args['session_language'] = session_language
    args['post_list'] = post_list
    args['user'] = request.user

    return render_to_response('post_list.html', args)

# This function has been replaced by the class PostDetailView.
#@permission_required('microblog.view_post')
# user.has_perm('Post.view_post')
def post_detail(request, pk, *args, **kwargs):
    post = Post.objects.get(pk=pk, published=True)

    args = {}
    args['post'] = post
    args['user'] = request.user

    return render_to_response('post_detail.html', args)
#    return render(request, template_name, context)



def language(request, language='en-gb'):
    response = HttpResponse('Setting language to %s' % language)
    response.set_cookie('lang', language)
    request.session['lang'] = language
    return response


@login_required
def create(request):
    if request.POST:
        form = PostForm(request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect("/all/") # hardcoded url makes me nervous
    else:
        form = PostForm()
    args = {}
    args.update(csrf(request))

    args['form'] = form
    args['author'] = request.user
    args['user'] = request.user

    return render_to_response('create_post.html', args)


@login_required
def edit(request, pk):
    my_post= Post.objects.get(pk = pk)
    if request.POST:
        form = PostForm(request.POST, instance = my_post)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect("/all/")
    else:
        form = PostForm(instance = my_post)

    args = {}
    args.update(csrf(request))
    args['form'] = form
    args['pk'] = pk
    args['user'] = request.user
    
    return render_to_response('edit_post.html', args)


def search_titles(request):
    if request.method == "POST":
        # Will presume there is a search_text var in POST dict and pass through.
        search_text = request.POST['search_text']
    else:
        # If not, set equal to empty string.
        search_text = ''

    posts = Post.objects.filter(title__contains=search_text)

    return render_to_response('ajax_search.html', {'posts' : posts})


class PublishedPostsMixin(object):
    def get_queryset(self):
        return self.model.objects.live()


class PostListView(PublishedPostsMixin, ListView):
    model = Post


class PostDetailView(PublishedPostsMixin, DetailView):
    model = Post
